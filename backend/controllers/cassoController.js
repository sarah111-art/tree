// controllers/cassoController.js
import Order from '../models/orderModel.js';

// X·ª≠ l√Ω webhook t·ª´ Casso
export const handleCassoWebhook = async (req, res) => {
  try {
    const { data, secure_token } = req.body;
    
    // Verify webhook token
    if (secure_token !== process.env.CASSO_SECURE_TOKEN) {
      console.error('‚ùå Invalid Casso webhook token');
      return res.status(401).json({ error: 'Invalid token' });
    }
    
    console.log('üì• Nh·∫≠n webhook t·ª´ Casso:', data);
    
    // Process t·ª´ng giao d·ªãch
    for (const transaction of data) {
      const { 
        description, 
        amount, 
        when, 
        bank_sub_acc_id,
        tid,
        casso_id
      } = transaction;
      
      // T√¨m m√£ ƒë∆°n h√†ng t·ª´ description
      const orderMatch = description.match(/DH(\d+)/i);
      if (orderMatch) {
        const orderID = orderMatch[1];
        
        try {
          // T√¨m ƒë∆°n h√†ng
          const order = await Order.findOne({ 
            orderId: orderID,
            status: { $in: ['pending', 'processing'] }
          });
          
          if (order) {
            // Ki·ªÉm tra s·ªë ti·ªÅn
            if (Math.abs(order.total - amount) <= 1000) { // Cho ph√©p sai s·ªë 1000ƒë
              // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
              order.status = 'paid';
              order.paymentMethod = 'bank';
              order.paymentId = tid || casso_id;
              order.paidAt = new Date(when * 1000);
              order.paymentDetails = {
                bankTransactionId: tid,
                cassoId: casso_id,
                bankSubAccId: bank_sub_acc_id,
                receivedAmount: amount,
                description: description
              };
              
              await order.save();
              
              console.log(`‚úÖ ƒê√£ nh·∫≠n thanh to√°n cho ƒë∆°n h√†ng ${orderID}: ${amount} VNƒê`);
              
              // TODO: G·ª≠i email x√°c nh·∫≠n thanh to√°n
              // TODO: G·ª≠i th√¥ng b√°o cho admin
            } else {
              console.warn(`‚ö†Ô∏è S·ªë ti·ªÅn kh√¥ng kh·ªõp cho ƒë∆°n ${orderID}: ƒê∆°n h√†ng ${order.total} VNƒê, Nh·∫≠n ${amount} VNƒê`);
            }
          } else {
            console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng ${orderID} ho·∫∑c ƒë√£ thanh to√°n`);
          }
        } catch (dbError) {
          console.error(`‚ùå L·ªói c·∫≠p nh·∫≠t ƒë∆°n h√†ng ${orderID}:`, dbError);
        }
      } else {
        console.log(`‚ÑπÔ∏è Giao d·ªãch kh√¥ng ph·∫£i ƒë∆°n h√†ng: ${description}`);
      }
    }
    
    res.status(200).json({ success: true, message: 'Webhook processed successfully' });
  } catch (error) {
    console.error('‚ùå L·ªói x·ª≠ l√Ω webhook Casso:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
};

// API check tr·∫°ng th√°i thanh to√°n
export const checkPaymentStatus = async (req, res) => {
  try {
    const { orderId } = req.params;
    
    const order = await Order.findOne({ orderId });
    
    if (!order) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng' });
    }
    
    res.json({
      orderId: order.orderId,
      status: order.status,
      paid: order.status === 'paid',
      amount: order.total,
      paidAt: order.paidAt,
      paymentMethod: order.paymentMethod
    });
  } catch (error) {
    console.error('‚ùå L·ªói check payment status:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
};

// T·∫°o QR thanh to√°n ƒë·ªông
export const createPaymentQR = async (req, res) => {
  try {
    const { orderId, amount, description } = req.body;
    
    if (!orderId || !amount) {
      return res.status(400).json({ message: 'Thi·∫øu th√¥ng tin ƒë∆°n h√†ng' });
    }
    
    // Import QR generator
    const { generatePaymentQR, validateBankInfo } = await import('../utils/qrGenerator.js');
    
    // Validate th√¥ng tin ng√¢n h√†ng
    try {
      validateBankInfo();
    } catch (error) {
      return res.status(500).json({ 
        message: 'Ch∆∞a c·∫•u h√¨nh th√¥ng tin ng√¢n h√†ng',
        error: error.message 
      });
    }
    
    // T·∫°o QR
    const qrData = await generatePaymentQR(orderId, amount, description);
    
    res.json({
      success: true,
      qrImage: qrData.qrImage,
      transferInfo: qrData.transferInfo
    });
  } catch (error) {
    console.error('‚ùå L·ªói t·∫°o QR thanh to√°n:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
};
