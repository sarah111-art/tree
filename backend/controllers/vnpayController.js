// ‚úÖ CONTROLLER: controllers/vnpayController.js

import crypto from 'crypto';
import axios from 'axios';
import dotenv from 'dotenv';
dotenv.config();

// üìå T·∫°o y√™u c·∫ßu thanh to√°n VNPay
export const createVNPayPayment = async (req, res) => {
  try {
    const { amount, orderId, orderInfo, redirectUrl } = req.body;

    const vnp_TmnCode = process.env.VNPAY_TMN_CODE;
    const vnp_HashSecret = process.env.VNPAY_HASH_SECRET;
    const vnp_Url = process.env.VNPAY_URL || 'https://sandbox.vnpayment.vn/paymentv2/vpcpay.html';
    const vnp_ReturnUrl = redirectUrl || process.env.VNPAY_RETURN_URL;

    const date = new Date();
    const createDate = date.toISOString().split('T')[0].split('-').join('');

    const orderType = 'billpayment';
    const locale = 'vn';
    const currCode = 'VND';
    const vnp_Params = {};

    vnp_Params['vnp_Version'] = '2.1.0';
    vnp_Params['vnp_Command'] = 'pay';
    vnp_Params['vnp_TmnCode'] = vnp_TmnCode;
    vnp_Params['vnp_Amount'] = amount * 100; // VNPay y√™u c·∫ßu s·ªë ti·ªÅn nh√¢n 100
    vnp_Params['vnp_CurrCode'] = currCode;
    vnp_Params['vnp_BankCode'] = '';
    vnp_Params['vnp_TxnRef'] = orderId;
    vnp_Params['vnp_OrderInfo'] = orderInfo;
    vnp_Params['vnp_OrderType'] = orderType;
    vnp_Params['vnp_Locale'] = locale;
    vnp_Params['vnp_ReturnUrl'] = vnp_ReturnUrl;
    vnp_Params['vnp_IpAddr'] = req.ip;
    vnp_Params['vnp_CreateDate'] = createDate;

    // S·∫Øp x·∫øp c√°c tham s·ªë theo th·ª© t·ª± a-z
    const sortedParams = Object.keys(vnp_Params).sort().reduce((result, key) => {
      result[key] = vnp_Params[key];
      return result;
    }, {});

    // T·∫°o chu·ªói hash data
    const signData = Object.keys(sortedParams).map(key => {
      return `${key}=${sortedParams[key]}`;
    }).join('&');

    // T·∫°o ch·ªØ k√Ω
    const hmac = crypto.createHmac('sha512', vnp_HashSecret);
    const signed = hmac.update(new Buffer.from(signData, 'utf-8')).digest('hex');
    vnp_Params['vnp_SecureHash'] = signed;

    // T·∫°o URL thanh to√°n
    const paymentUrl = `${vnp_Url}?${Object.keys(vnp_Params).map(key => {
      return `${key}=${encodeURIComponent(vnp_Params[key])}`;
    }).join('&')}`;

    res.json({
      resultCode: 0,
      message: 'T·∫°o thanh to√°n VNPay th√†nh c√¥ng',
      payUrl: paymentUrl,
      orderId: orderId
    });
  } catch (err) {
    console.error('VNPay error:', err);
    res.status(500).json({ message: 'L·ªói t·∫°o thanh to√°n VNPay', error: err.message });
  }
};

// üìå X·ª≠ l√Ω callback t·ª´ VNPay
export const handleVNPayCallback = async (req, res) => {
  try {
    const vnp_Params = req.query;
    const secureHash = vnp_Params['vnp_SecureHash'];

    // X√≥a vnp_SecureHash v√† vnp_SecureHashType kh·ªèi params
    delete vnp_Params['vnp_SecureHash'];
    delete vnp_Params['vnp_SecureHashType'];

    // S·∫Øp x·∫øp c√°c tham s·ªë theo th·ª© t·ª± a-z
    const sortedParams = Object.keys(vnp_Params).sort().reduce((result, key) => {
      result[key] = vnp_Params[key];
      return result;
    }, {});

    // T·∫°o chu·ªói hash data
    const signData = Object.keys(sortedParams).map(key => {
      return `${key}=${sortedParams[key]}`;
    }).join('&');

    // T·∫°o ch·ªØ k√Ω
    const hmac = crypto.createHmac('sha512', process.env.VNPAY_HASH_SECRET);
    const signed = hmac.update(new Buffer.from(signData, 'utf-8')).digest('hex');

    // Ki·ªÉm tra ch·ªØ k√Ω
    if (secureHash === signed) {
      const orderId = vnp_Params['vnp_TxnRef'];
      const rspCode = vnp_Params['vnp_ResponseCode'];
      const amount = vnp_Params['vnp_Amount'] / 100; // Chia 100 ƒë·ªÉ l·∫•y s·ªë ti·ªÅn th·ª±c
      const transId = vnp_Params['vnp_TransactionNo'];

      if (rspCode === '00') {
        console.log(`‚úÖ Thanh to√°n VNPay th√†nh c√¥ng cho ƒë∆°n ${orderId}`);
        
        try {
          // Import Order model
          const Order = (await import('../models/orderModel.js')).default;
          
          // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
          const updatedOrder = await Order.findOneAndUpdate(
            { orderId: orderId },
            { 
              status: 'paid',
              paymentMethod: 'vnpay',
              paymentId: transId,
              paidAt: new Date()
            },
            { new: true }
          );
          
          if (updatedOrder) {
            console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t ƒë∆°n h√†ng ${orderId} th√†nh c√¥ng`);
          } else {
            console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng ${orderId} ƒë·ªÉ c·∫≠p nh·∫≠t`);
          }
        } catch (dbError) {
          console.error('‚ùå L·ªói c·∫≠p nh·∫≠t database:', dbError);
        }

        // Redirect v·ªÅ trang th√†nh c√¥ng
        res.redirect(`${process.env.FRONTEND_URL}/payment-success?resultCode=0&orderId=${orderId}&transId=${transId}&message=Thanh to√°n th√†nh c√¥ng`);
      } else {
        console.warn(`‚ö†Ô∏è Giao d·ªãch VNPay th·∫•t b·∫°i ƒë∆°n ${orderId} - Code: ${rspCode}`);
        res.redirect(`${process.env.FRONTEND_URL}/payment-success?resultCode=${rspCode}&orderId=${orderId}&message=Thanh to√°n th·∫•t b·∫°i`);
      }
    } else {
      console.error('‚ùå Sai ch·ªØ k√Ω VNPay');
      res.redirect(`${process.env.FRONTEND_URL}/payment-success?resultCode=99&message=Sai ch·ªØ k√Ω`);
    }
  } catch (err) {
    console.error('VNPay callback error:', err);
    res.redirect(`${process.env.FRONTEND_URL}/payment-success?resultCode=99&message=L·ªói x·ª≠ l√Ω callback`);
  }
};

// üìå T·∫°o QR code VNPay
export const createVNPayQR = async (req, res) => {
  try {
    const { amount, orderId, orderInfo } = req.body;

    const vnp_TmnCode = process.env.VNPAY_TMN_CODE;
    const vnp_HashSecret = process.env.VNPAY_HASH_SECRET;
    const vnp_Url = process.env.VNPAY_QR_URL || 'https://sandbox.vnpayment.vn/merchant_webapi/api/transaction';

    const date = new Date();
    const createDate = date.toISOString().split('T')[0].split('-').join('');

    const vnp_Params = {};
    vnp_Params['vnp_Version'] = '2.1.0';
    vnp_Params['vnp_Command'] = 'pay';
    vnp_Params['vnp_TmnCode'] = vnp_TmnCode;
    vnp_Params['vnp_Amount'] = amount * 100;
    vnp_Params['vnp_CurrCode'] = 'VND';
    vnp_Params['vnp_TxnRef'] = orderId;
    vnp_Params['vnp_OrderInfo'] = orderInfo;
    vnp_Params['vnp_OrderType'] = 'billpayment';
    vnp_Params['vnp_Locale'] = 'vn';
    vnp_Params['vnp_CreateDate'] = createDate;
    vnp_Params['vnp_IpAddr'] = req.ip;

    // S·∫Øp x·∫øp v√† t·∫°o ch·ªØ k√Ω
    const sortedParams = Object.keys(vnp_Params).sort().reduce((result, key) => {
      result[key] = vnp_Params[key];
      return result;
    }, {});

    const signData = Object.keys(sortedParams).map(key => {
      return `${key}=${sortedParams[key]}`;
    }).join('&');

    const hmac = crypto.createHmac('sha512', vnp_HashSecret);
    const signed = hmac.update(new Buffer.from(signData, 'utf-8')).digest('hex');
    vnp_Params['vnp_SecureHash'] = signed;

    // G·ªçi API VNPay ƒë·ªÉ t·∫°o QR
    const response = await axios.post(vnp_Url, vnp_Params, {
      headers: {
        'Content-Type': 'application/json'
      }
    });

    if (response.data.vnp_ResponseCode === '00') {
      res.json({
        resultCode: 0,
        message: 'T·∫°o QR VNPay th√†nh c√¥ng',
        qrCode: response.data.vnp_QRCode,
        orderId: orderId
      });
    } else {
      res.status(400).json({
        resultCode: response.data.vnp_ResponseCode,
        message: response.data.vnp_Message || 'L·ªói t·∫°o QR VNPay'
      });
    }
  } catch (err) {
    console.error('VNPay QR error:', err);
    res.status(500).json({ message: 'L·ªói t·∫°o QR VNPay', error: err.message });
  }
};
