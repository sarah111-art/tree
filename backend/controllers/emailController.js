import nodemailer from 'nodemailer';
import jsPDF from 'jspdf';

const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: process.env.MAIL_USER,
    pass: process.env.MAIL_PASS,
  },
});

// Test endpoint ƒë·ªÉ ki·ªÉm tra API
export const testEmail = async (req, res) => {
  try {
    console.log('üß™ Test endpoint ƒë∆∞·ª£c g·ªçi');
    console.log('üß™ Request body:', JSON.stringify(req.body, null, 2));
    console.log('üß™ Request headers:', req.headers);
    
    res.json({ 
      success: true, 
      message: 'Test endpoint ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng',
      receivedData: req.body,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('‚ùå L·ªói test endpoint:', error);
    res.status(500).json({ message: 'L·ªói test endpoint' });
  }
};

export const sendInvoiceEmail = async (req, res) => {
  try {
    console.log('üìß B·∫Øt ƒë·∫ßu g·ª≠i email h√≥a ƒë∆°n...');
    console.log('üìß Raw body:', JSON.stringify(req.body, null, 2));
    // Chu·∫©n ho√° d·ªØ li·ªáu ƒë·∫ßu v√†o ƒë·ªÉ tr√°nh l·ªói 400/500 do kh√°c c·∫•u tr√∫c
    const body = req.body || {};
    const node = body.order || {};
    const normalizedOrderId = body.orderId || node._id || node.orderNumber || body._id || `ORDER_${Date.now()}`;
    const normalizedCustomerEmail = body.customerEmail || node.customer?.email || body.email || '';
    const normalizedCustomerName = body.customerName || node.customer?.name || body.name || '';
    const normalizedOrderDetails = body.orderDetails || {
      items: node.items || [],
      total: node.total,
      paymentMethod: node.paymentMethod,
      orderDate: node.createdAt,
      shippingAddress: node.customer?.address,
      phone: node.customer?.phone,
    };

    // G√°n v·ªÅ c√°c t√™n d√πng ph√≠a d∆∞·ªõi (sau khi ƒë√£ kh·ªüi t·∫°o ƒë·∫ßy ƒë·ªß)
    const orderId = normalizedOrderId;
    const customerEmail = normalizedCustomerEmail;
    const customerName = normalizedCustomerName;
    const orderDetails = normalizedOrderDetails;

    console.log('üìß Parsed:', {
      orderId,
      customerEmail,
      customerName,
      items: Array.isArray(orderDetails?.items) ? orderDetails.items.length : 0,
      total: orderDetails?.total,
      paymentMethod: orderDetails?.paymentMethod,
      phone: orderDetails?.phone,
      shippingAddress: orderDetails?.shippingAddress,
    });

    // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!orderId) {
      console.error('‚ùå Thi·∫øu orderId');
      return res.status(400).json({ message: 'Thi·∫øu m√£ ƒë∆°n h√†ng' });
    }
    
    if (!customerEmail) {
      console.error('‚ùå Thi·∫øu email kh√°ch h√†ng');
      return res.status(400).json({ message: 'Thi·∫øu email kh√°ch h√†ng' });
    }
    
    if (!customerName) {
      console.error('‚ùå Thi·∫øu t√™n kh√°ch h√†ng');
      return res.status(400).json({ message: 'Thi·∫øu t√™n kh√°ch h√†ng' });
    }
    
    if (!orderDetails) {
      console.error('‚ùå Thi·∫øu chi ti·∫øt ƒë∆°n h√†ng');
      return res.status(400).json({ message: 'Thi·∫øu chi ti·∫øt ƒë∆°n h√†ng' });
    }

    // Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc trong orderDetails
    console.log('üîç Ki·ªÉm tra orderDetails.items:', orderDetails.items);
    if (!orderDetails.items || !Array.isArray(orderDetails.items) || orderDetails.items.length === 0) {
      console.error('‚ùå Thi·∫øu ho·∫∑c sai ƒë·ªãnh d·∫°ng danh s√°ch s·∫£n ph·∫©m:', orderDetails.items);
      return res.status(400).json({ 
        message: 'Thi·∫øu danh s√°ch s·∫£n ph·∫©m',
        received: orderDetails.items 
      });
    }
    
    // T√≠nh l·∫°i t·ªïng ti·ªÅn n·∫øu thi·∫øu/kh√¥ng h·ª£p l·ªá thay v√¨ tr·∫£ 400
    let computedTotal = Number(orderDetails.total || 0);
    if (!computedTotal || computedTotal <= 0) {
      computedTotal = (orderDetails.items || []).reduce((sum, it) => {
        const price = Number(it.price || 0);
        const qty = Number(it.quantity || 1);
        return sum + price * qty;
      }, 0);
      console.log('üßÆ T·ªïng ti·ªÅn ƒë∆∞·ª£c t√≠nh l·∫°i:', computedTotal);
    }

    // T·∫°o order object ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi code hi·ªán t·∫°i
    const order = {
      _id: orderId,
      orderNumber: orderId,
      customer: {
        name: customerName,
        email: customerEmail,
        phone: orderDetails.phone || 'N/A',
        address: orderDetails.shippingAddress || 'N/A'
      },
      items: orderDetails.items,
      total: computedTotal,
      paymentMethod: orderDetails.paymentMethod || 'cod',
      createdAt: orderDetails.orderDate || new Date().toISOString(),
      status: 'pending'
    };

    // Validate email configuration
    if (!process.env.MAIL_USER || !process.env.MAIL_PASS) {
      console.error('‚ùå Thi·∫øu c·∫•u h√¨nh email:', {
        MAIL_USER: !!process.env.MAIL_USER,
        MAIL_PASS: !!process.env.MAIL_PASS
      });
      // Kh√¥ng ch·∫∑n lu·ªìng ƒë·∫∑t h√†ng
      return res.json({ 
        success: false, 
        message: 'Ch∆∞a c·∫•u h√¨nh email server. B·ªè qua b∆∞·ªõc g·ª≠i email.' 
      });
    }

    // Validate order data
    if (!order.customer?.email) {
      return res.status(400).json({ 
        success: false, 
        message: 'Kh√°ch h√†ng ch∆∞a c√≥ email' 
      });
    }

    console.log('üìß G·ª≠i email ƒë·∫øn:', order.customer.email);
    console.log('üìß T·ª´ email:', process.env.MAIL_USER);

    console.log('üßæ B·∫Øt ƒë·∫ßu t·∫°o PDF ho√° ƒë∆°n');
    let pdfBuffer = null;
    let pdfError = null;
    let doc;
    try {
      // T·∫°o PDF h√≥a ƒë∆°n
      doc = new jsPDF();
    
    // Header
    doc.setFontSize(20);
    doc.setTextColor(34, 197, 94);
    doc.text('HOA DON BAN HANG', 105, 25, { align: 'center' });
    
    // Reset color
    doc.setTextColor(0, 0, 0);
    
    // Company info
    doc.setFontSize(14);
    doc.setTextColor(34, 197, 94);
    doc.text('BONSAI SHOP', 20, 45);
    
    doc.setFontSize(10);
    doc.setTextColor(0, 0, 0);
    doc.text('Dia chi: 123 Duong ABC, Quan XYZ, TP.HCM', 20, 55);
    doc.text('Dien thoai: 0123 456 789', 20, 60);
    doc.text('Email: info@bonsaishop.com', 20, 65);
    
    // Invoice info
    doc.setFontSize(11);
    doc.text(`Ma hoa don: ${order.orderNumber || order._id}`, 120, 45);
    doc.text(`Ngay: ${new Date(order.createdAt).toLocaleDateString('vi-VN')}`, 120, 55);
    doc.text(`Trang thai: ${getStatusText(order.status)}`, 120, 65);
    
    // Customer info
    doc.setFontSize(14);
    doc.setTextColor(34, 197, 94);
    doc.text('THONG TIN KHACH HANG', 20, 85);
    
    doc.setFontSize(11);
    doc.setTextColor(0, 0, 0);
    doc.text(`Ten: ${order.customer?.name || 'N/A'}`, 20, 95);
    doc.text(`SDT: ${order.customer?.phone || 'N/A'}`, 20, 100);
    doc.text(`Dia chi: ${order.customer?.address || 'N/A'}`, 20, 105);
    doc.text(`Email: ${order.customer?.email || 'N/A'}`, 20, 110);
    
    // Payment info
    doc.setFontSize(14);
    doc.setTextColor(34, 197, 94);
    doc.text('THONG TIN THANH TOAN', 20, 130);
    
    doc.setFontSize(11);
    doc.setTextColor(0, 0, 0);
    doc.text(`Phuong thuc: ${getPaymentMethodText(order.paymentMethod)}`, 20, 140);
    
    // Items header
    doc.setFontSize(14);
    doc.setTextColor(34, 197, 94);
    doc.text('CHI TIET SAN PHAM', 20, 160);
    
    // Items table header
    doc.setFontSize(11);
    doc.setTextColor(0, 0, 0);
    doc.text('STT', 20, 175);
    doc.text('San pham', 35, 175);
    doc.text('SL', 120, 175);
    doc.text('Don gia', 140, 175);
    doc.text('Thanh tien', 170, 175);
    
    // Draw table lines
    doc.setDrawColor(34, 197, 94);
    doc.line(20, 180, 190, 180);
    
    // Items
    let yPosition = 190;
    order.items.forEach((item, index) => {
      if (yPosition > 250) {
        doc.addPage();
        yPosition = 20;
      }
      
      doc.setFontSize(10);
      doc.setTextColor(0, 0, 0);
      doc.text((index + 1).toString(), 20, yPosition);
      doc.text(item.name, 35, yPosition);
      doc.text(item.quantity.toString(), 120, yPosition);
      doc.text(`${item.price?.toLocaleString()} VND`, 140, yPosition);
      doc.text(`${(item.price * item.quantity)?.toLocaleString()} VND`, 170, yPosition);
      
      yPosition += 12;
    });
    
    // Total line
    doc.setDrawColor(34, 197, 94);
    doc.line(20, yPosition + 5, 190, yPosition + 5);
    
    // Total
    doc.setFontSize(14);
    doc.setTextColor(34, 197, 94);
    doc.text(`Tong cong: ${order.total?.toLocaleString()} VND`, 150, yPosition + 15);
    
    // Footer
    doc.setFontSize(12);
    doc.setTextColor(128, 128, 128);
    doc.text('Cam on quy khach da mua hang!', 105, yPosition + 30, { align: 'center' });
    doc.text('Hen gap lai quy khach!', 105, yPosition + 35, { align: 'center' });
    
      // Convert PDF to base64 
      const pdfBase64 = doc.output('datauristring').split(',')[1];
      pdfBuffer = Buffer.from(pdfBase64, 'base64');
      console.log('üßæ PDF ƒë√£ t·∫°o xong, k√≠ch th∆∞·ªõc (bytes):', pdfBuffer.length);
    } catch (e) {
      pdfError = e;
      console.error('‚ùå L·ªói khi t·∫°o PDF:', e?.message || e);
    }

    // Email content
    const mailOptions = {
      from: process.env.MAIL_USER,
      to: order.customer?.email,
      subject: `H√≥a ƒë∆°n ƒë∆°n h√†ng #${order.orderNumber || order._id} - BONSAI SHOP`,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <div style="background-color: #22c55e; color: white; padding: 20px; text-align: center;">
            <h1 style="margin: 0;">BONSAI SHOP</h1>
            <p style="margin: 10px 0 0 0;">C·∫£m ∆°n qu√Ω kh√°ch ƒë√£ mua h√†ng!</p>
          </div>
          
          <div style="padding: 20px; background-color: #f9f9f9;">
            <h2 style="color: #22c55e;">Th√¥ng tin ƒë∆°n h√†ng</h2>
            <p><strong>M√£ ƒë∆°n h√†ng:</strong> ${order.orderNumber || order._id}</p>
            <p><strong>Ng√†y ƒë·∫∑t:</strong> ${new Date(order.createdAt).toLocaleDateString('vi-VN')}</p>
            <p><strong>Tr·∫°ng th√°i:</strong> ${getStatusText(order.status)}</p>
            <p><strong>T·ªïng ti·ªÅn:</strong> ${order.total?.toLocaleString()} VND</p>
          </div>
          
          <div style="padding: 20px;">
            <h3 style="color: #22c55e;">Chi ti·∫øt s·∫£n ph·∫©m</h3>
            <table style="width: 100%; border-collapse: collapse; margin-top: 10px;">
              <thead>
                <tr style="background-color: #22c55e; color: white;">
                  <th style="padding: 10px; text-align: left; border: 1px solid #ddd;">STT</th>
                  <th style="padding: 10px; text-align: left; border: 1px solid #ddd;">S·∫£n ph·∫©m</th>
                  <th style="padding: 10px; text-align: center; border: 1px solid #ddd;">SL</th>
                  <th style="padding: 10px; text-align: right; border: 1px solid #ddd;">ƒê∆°n gi√°</th>
                  <th style="padding: 10px; text-align: right; border: 1px solid #ddd;">Th√†nh ti·ªÅn</th>
                </tr>
              </thead>
              <tbody>
                ${order.items.map((item, index) => `
                  <tr>
                    <td style="padding: 10px; border: 1px solid #ddd;">${index + 1}</td>
                    <td style="padding: 10px; border: 1px solid #ddd;">${item.name}</td>
                    <td style="padding: 10px; text-align: center; border: 1px solid #ddd;">${item.quantity}</td>
                    <td style="padding: 10px; text-align: right; border: 1px solid #ddd;">${item.price?.toLocaleString()} VND</td>
                    <td style="padding: 10px; text-align: right; border: 1px solid #ddd;">${(item.price * item.quantity)?.toLocaleString()} VND</td>
                  </tr>
                `).join('')}
              </tbody>
            </table>
            
            <div style="text-align: right; margin-top: 20px; font-size: 18px; font-weight: bold; color: #22c55e;">
              T·ªïng c·ªông: ${order.total?.toLocaleString()} VND
            </div>
          </div>
          
          <div style="background-color: #f9f9f9; padding: 20px; text-align: center;">
            <p style="margin: 0; color: #666;">H√≥a ƒë∆°n PDF ƒë∆∞·ª£c ƒë√≠nh k√®m b√™n d∆∞·ªõi</p>
            <p style="margin: 10px 0 0 0; color: #666;">H·∫πn g·∫∑p l·∫°i qu√Ω kh√°ch!</p>
          </div>
        </div>
      `,
      attachments: pdfBuffer ? [
        {
          filename: `hoa-don-${order.orderNumber || order._id}.pdf`,
          content: pdfBuffer,
          contentType: 'application/pdf'
        }
      ] : []
    };

    // G·ª≠i email
    console.log('üì§ ƒêang g·ª≠i email...');
    console.log('üì§ Mail options:', {
      from: mailOptions.from,
      to: mailOptions.to,
      subject: mailOptions.subject,
      hasAttachments: mailOptions.attachments?.length > 0,
      pdfError: pdfError ? (pdfError?.message || String(pdfError)) : null
    });
    
    try {
      const result = await transporter.sendMail(mailOptions);
      console.log('‚úÖ Email ƒë√£ g·ª≠i th√†nh c√¥ng:', result.messageId);

      return res.json({ 
        success: true, 
        message: 'H√≥a ƒë∆°n ƒë√£ ƒë∆∞·ª£c g·ª≠i qua email th√†nh c√¥ng!',
        messageId: result.messageId
      });
    } catch (sendErr) {
      console.error('‚ùå G·ª≠i email th·∫•t b·∫°i, nh∆∞ng kh√¥ng ch·∫∑n ƒë∆°n h√†ng:', sendErr?.message || sendErr);
      // Tr·∫£ v·ªÅ 200 ƒë·ªÉ frontend kh√¥ng xem l√† l·ªói nghi√™m tr·ªçng
      return res.json({
        success: false,
        message: 'Kh√¥ng g·ª≠i ƒë∆∞·ª£c email h√≥a ƒë∆°n, nh∆∞ng ƒë∆°n h√†ng v·∫´n ƒë∆∞·ª£c t·∫°o.'
      });
    }

  } catch (error) {
    console.error('‚ùå L·ªói t·ªïng khi x·ª≠ l√Ω g·ª≠i email:', error);
    // Lu√¥n tr·∫£ 200 ƒë·ªÉ kh√¥ng ch·∫∑n checkout
    return res.json({
      success: false,
      message: 'G·∫∑p l·ªói khi t·∫°o/g·ª≠i h√≥a ƒë∆°n qua email. ƒê∆°n h√†ng v·∫´n h·ª£p l·ªá.'
    });
  }
};

const getStatusText = (status) => {
  const statusMap = {
    'pending': 'Ch·ªù x√°c nh·∫≠n',
    'confirmed': 'ƒê√£ x√°c nh·∫≠n',
    'shipping': 'ƒêang giao',
    'delivered': 'ƒê√£ giao',
    'cancelled': 'ƒê√£ hu·ª∑'
  };
  return statusMap[status] || status;
};
const getPaymentMethodText = (method) => {
  const methodMap = {
    'cod': 'Thanh to√°n khi nh·∫≠n h√†ng',
    'momo': 'V√≠ MoMo',
    'vnpay': 'VNPay',
    'bank': 'Chuy·ªÉn kho·∫£n ng√¢n h√†ng'
  };
  return methodMap[method] || method || 'Thanh to√°n khi nh·∫≠n h√†ng';
};

